#+TITLE: Layout
#+DATE_CREATED: <2020-03-24 Tue>
#+DATE_UPDATED: <2020-08-25 16:54>
#+FIRN_UNDER: "Content"
#+FIRN_ORDER: 1
#+FIRN_FOLD: {2 true}

* Overview

When you create a new Firn site for the first time, it will create a folder:
=_firn/layouts=. The layout folder stores Clojure files (=.clj=) that are
responsible for how your org-file is rendered to-html; The act of "applying" a
template means to pass the content of the org-file through a specific [[https://github.com/weavejester/hiccup][clojure hiccup]]
template that organizes how the content is displayed.

When an org-mode file is processed by Firn it looks for the in-buffer-setting (or what might be called "[[file:front-matter.org][Front Matter]]")
~#+FIRN_LAYOUT:~ to see if it uses a Layout. If none are specified, the _default
template_ is used.

* A simple layout file

Let's consider a simple layout file:

#+BEGIN_SRC clojure

(defn default                   ; define a clojure func
  [{:keys [build-url title render partials]}] ; destructured commonly used functions and data
  (let [{:keys [head]} partials]              ; Ignore for now, partials will be explained later
    [:html                      ; => opens a `html` tag
     (head build-url)           ; => Renders the `head` partial
     [:body                     ; => opens a `body` tag
      [:main                    ; => Ditto
       [:article.def-wrapper    ; => opens a `article` html tag with a class of `def-wrapper`
        [:div.def-content       ; => see above
         [:h1 title]            ; => renders an `h1` tag with the file title.
         (render :file) ;       ; => `render` is where the magic happens!
         ]]]]]))                ; => all these closing brackets can be thought of as closing html tags (for now)
#+END_SRC

The above may look a little strange if you are not familiar with Clojure. The
next document will expand on what the ~render~ function does.

