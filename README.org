
ðŸš§ Static site generator using org-mode. Under Development. Not recommended for
use.

* What's this?

Firn generates a website from your .org mode files. It's original intention was
to support the building of a flat file wiki, but it has moved beyond that (for now.)

Currently, running the program on a directory of org files performs the
following:

- Reads all .org files in the directory recursively
- Pulls layouts and partials into memory (from specified folders), from .clj
  files with hiccup.
- Iterates over files and runs them through [[https://github.com/PoiScript/orgize][Orgize]], then turns the resulting
  data into html.
  
* Usage
Provided you have built an uberjar as described in the =Developing= section:

#+BEGIN_SRC
java -jar <path_to_code>/firn/target/uberjar/firn-0.1.0-SNAPSHOT-standalone.jar <path_to_content>
#+END_SRC

* Assumptions / Limitations
- the content _directory name_ (ex: "my_wiki") should not exist anywhere else in
  the path to a file in the wiki.
  - for example, this is bad: /development/*my_wiki*/some_more_dirs/*my_wiki*/file_1.org
  - Unlikely that user's will have this, but it's currently a limitation nonetheless.
- Org mode links should be set to relative. You can probably do this with
  dir-locals and setting [[https://emacs.stackexchange.com/questions/32601/how-can-i-get-with-org-store-link-relative-path-instead-of-absolute][org-link-file-path-type]] to =relative=.

* Layouts

There is a very basic templating/layout system in place. When running =firn=, it looks
for a =_layouts= directory. Currently, layouts are built with hiccup and are
explicity passed the entire =config= object (the base of which can be see in
[[file:src/firn/config.clj][config.clj]]).

From there, you have acccess to the values that accumulate in the ~config~ map
as the program runs over time.

Firn currently requires you to have a =_layouts/default.clj= file. In its
simplest form, it might look something like this.

#+BEGIN_SRC  clojure
(defn layout-default ;; < the name of this function is irrelevant.
  "Renders a templates as if a project.
  Someday this will become a macro. Maybe."
  [config]
  (let [{:keys [ head ]} (config :partials)
        render                (config :render)
        content               (-> config :curr-file :as-edn)]

    (head
     [:body
      [:main
       [:article
        [:div (render content)]]
       [:aside
        [:div ""]
        [:div ""]]]])))
#+END_SRC

Eventually, this might be replaced with some kind of macro (?). Using
=read-string= is not exactly smart/safe probably.

* Developing

Versions:

- Clojure / Lein - 1.9.0
- rustc 1.41.1

Up and atom:

#+BEGIN_SRC sh
git clone git@github.com:theiceshelf/firn.git
cd firn
lein deps
cargo build
#+END_SRC

To build a jar:
#+BEGIN_SRC sh
lein uberjar
#+END_SRC

Example usage:

